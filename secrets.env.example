# Certificate Spreader Environment Variables (EXAMPLE FILE)
# ================================================================
#
# This file contains EXAMPLE values for all environment variables
# that cert-spreader.py can use to override configuration settings.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp secrets.env.example secrets.env
# 2. Edit the new file: nano secrets.env  
# 3. Replace all example values with your actual credentials
# 4. The new secrets.env file will be ignored by git (it's in .gitignore)
#
# SECURITY NOTES:
# - Never commit secrets.env to version control
# - Keep file permissions restrictive: chmod 600 secrets.env
# - This example file is safe to commit (contains no real secrets)
#
# WHAT ARE ENVIRONMENT VARIABLES?
# Environment variables are settings stored in your shell's memory that
# programs can read. They're perfect for secrets because:
# - They don't get saved in files that could be accidentally shared
# - They're automatically cleared when your terminal session ends
# - Each server can have different values without changing code

# === PROXMOX CREDENTIALS ===
# These are the most sensitive values in your setup
#
# PROXMOX_USER format: "username@realm!tokenid"
# - username: Your Proxmox username (e.g., "endfro")  
# - realm: Authentication realm (e.g., "pve" for local)
# - tokenid: Name you gave the API token (e.g., "letsencrypt")
export CERT_SPREADER_PROXMOX_USER="user@pve!tokenname"

# PROXMOX_TOKEN: The actual API token value from Proxmox
# This is a long string of letters and numbers with dashes
# You get this when you create an API token in Proxmox web interface
export CERT_SPREADER_PROXMOX_TOKEN="your-actual-proxmox-api-token-here"

# === CERTIFICATE PASSWORDS ===
# Password used to protect the Plex PKCS12 certificate file
# This should be a strong password since the certificate contains your private key
export CERT_SPREADER_PLEX_PASSWORD="your-plex-certificate-password"

# === BASIC SETTINGS ===
# Your domain name (used to construct hostnames like "host1.your-domain.com")
export CERT_SPREADER_DOMAIN="your-domain.com"

# Username for file ownership on backup operations
export CERT_SPREADER_USERNAME="your-username"

# Directory where Let's Encrypt certificates are stored
# Typically /etc/letsencrypt/live/your-domain.com
export CERT_SPREADER_CERT_DIR="/etc/letsencrypt/live/your-domain.com"

# ================================================================
# USAGE METHODS (choose one):
# ================================================================

# === METHOD 1: Use the wrapper script (RECOMMENDED) ===
# The wrapper script (run-cert-spreader.sh) automatically loads this file
# and cleans up afterwards:
#
# $ ./run-cert-spreader.sh --dry-run
# $ ./run-cert-spreader.sh --verbose

# === METHOD 2: Manual source ===
# Load the environment variables manually, then run the script:
#
# $ source secrets.env
# $ python3 cert-spreader.py --dry-run
# $ unset CERT_SPREADER_PROXMOX_TOKEN  # Manual cleanup (optional)

# === METHOD 3: One-time load ===
# Load variables and run script in a single command:
#
# $ env $(cat secrets.env | grep -v '^#' | xargs) python3 cert-spreader.py --dry-run

# === METHOD 4: Individual exports ===
# Set variables one at a time (useful for testing):
#
# $ export CERT_SPREADER_PROXMOX_TOKEN="abc123"
# $ python3 cert-spreader.py --dry-run

# ================================================================
# VERIFICATION:
# ================================================================
# After loading, you can verify variables are set:
# $ echo $CERT_SPREADER_DOMAIN
# $ env | grep CERT_SPREADER