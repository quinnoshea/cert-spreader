# Certificate Spreader Environment Variables (EXAMPLE FILE)
# ================================================================
#
# This file shows how to use environment variables as an alternative
# to the config.conf file. The bash script (cert-spreader.sh) currently
# uses config.conf, but this approach could be implemented if needed.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp secrets.env.example secrets.env
# 2. Edit the new file: nano secrets.env  
# 3. Replace all example values with your actual credentials
# 4. The new secrets.env file will be ignored by git (it's in .gitignore)
# 5. Modify cert-spreader.sh to source this file if you prefer this approach
#
# SECURITY NOTES:
# - Never commit secrets.env to version control
# - Keep file permissions restrictive: chmod 600 secrets.env
# - This example file is safe to commit (contains no real secrets)
#
# ================================================================
# BASIC CONFIGURATION
# ================================================================

# Your domain name (used to construct hostnames like "host1.your-domain.com")
export DOMAIN="your-domain.com"

# Directory where Let's Encrypt certificates are stored
export CERT_DIR="/etc/letsencrypt/live/your-domain.com"


# SSH options for connections
export SSH_OPTS="-o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new"

# Log file location
export LOG_FILE="/var/log/cert-spreader.log"

# ================================================================
# HOST CONFIGURATION
# ================================================================

# Space-separated list of hosts to deploy certificates to
export HOSTS="web-server mail-server app-server irc-server dns01 dns02"

# NOTE: Host-specific services would need to be handled differently
# in environment variables. The current script uses bash arrays
# which work better in config.conf format.


# ================================================================
# PROXMOX CREDENTIALS (MOST SENSITIVE)
# ================================================================

# PROXMOX_USER format: "username@realm!tokenid"
# - username: Your Proxmox username (e.g., "admin")  
# - realm: Authentication realm (e.g., "pve" for local)
# - tokenid: Name you gave the API token (e.g., "letsencrypt")
export PROXMOX_USER="user@pve!tokenname"

# PROXMOX_TOKEN: The actual API token value from Proxmox
# This is a long string of letters and numbers with dashes
# You get this when you create an API token in Proxmox web interface
export PROXMOX_TOKEN="your-actual-proxmox-api-token-here"

# ================================================================
# COMPREHENSIVE CERTIFICATE CONFIGURATION  
# ================================================================

# ENHANCED: Flexible certificate generation supporting multiple formats
# and cross-platform compatibility for various applications

# ARRAY-BASED CUSTOM CERTIFICATES (Recommended for multiple certificates)
# Format: "type:param:filename" where param is optional (password, dhparam file, etc.)
export CUSTOM_CERTIFICATES=(
    # PKCS12 certificates for Windows/IIS/Exchange/client certificates
    "pkcs12:YourSecretPassword:plex-media-server.pfx"           # Plex Media Server
    "pkcs12:ExchangePassword:exchange-server.pfx"               # Microsoft Exchange
    "pkcs12::windows-service.pfx"                               # Windows service (no password)
    
    # Concatenated certificates for web servers and services
    "concatenated:/etc/ssl/dhparam.pem:nginx-server.pem"        # Nginx with DH parameters
    "concatenated::apache-server.pem"                           # Apache simple concatenated
    "concatenated:/etc/ssl/dhparam.pem:haproxy-frontend.pem"    # HAProxy load balancer
    "concatenated::znc-irc.pem"                                 # ZNC IRC bouncer
    
    # DER certificates for Java/Android/embedded systems
    "der::java-application.der"                                 # Java application
    "der::android-mobile-app.crt"                               # Android application
    "der::embedded-device.der"                                  # IoT/embedded system
    
    # PKCS#7 certificates for Windows certificate stores/Java trust chains
    "pkcs7::windows-trust-store.p7b"                            # Windows certificate store
    "p7b::java-trust-chain.p7b"                                 # Java trust chain
    "pkcs7::certificate-bundle.p7c"                             # Certificate bundle
    
    # Individual certificate files for various applications
    "crt::web-server.crt"                                       # Web server certificate
    "pem::custom-application.pem"                               # Custom PEM certificate
    
    # CA bundle files for certificate validation
    "bundle::ca-certificates.bundle"                            # CA certificate bundle
    "bundle::trust-store.pem"                                   # Trust store bundle
    
    # JKS certificates for Java applications (requires Java keytool)
    "jks:JavaKeystorePassword:tomcat-server.jks"                # Tomcat web server
    "jks:AppPassword123:spring-boot-app.jks"                    # Spring Boot application
)

# INDIVIDUAL CERTIFICATE SETTINGS (Legacy compatibility)
# PKCS12/PFX certificate settings
export PKCS12_ENABLED="true"
export PKCS12_PASSWORD="your-certificate-password"  # Leave empty for no password
export PKCS12_FILENAME="certificate.pfx"

# Concatenated certificate settings
export CONCATENATED_ENABLED="true"
export CONCATENATED_DHPARAM_FILE="/etc/nginx/ssl/dhparam.pem"  # Optional
export CONCATENATED_FILENAME="combined.pem"

# CERTIFICATE TYPE USE CASES:
# - PKCS12 (.pfx): Windows IIS, Exchange, Plex, client certificates
# - Concatenated (.pem): Nginx, Apache, HAProxy, ZNC, most Linux services
# - DER (.der/.crt): Java applications, Android apps, embedded systems
# - PKCS#7 (.p7b/.p7c): Windows certificate stores, Java trust chains
# - CRT (.crt): Individual certificate files, various web servers
# - PEM (.pem): Custom certificate files, Linux/Unix applications
# - Bundle (.bundle): CA certificate bundles, trust stores
# - JKS (.jks): Java applications, Tomcat, Spring Boot, Apache Kafka

# ================================================================
# FILE PERMISSIONS CONFIGURATION
# ================================================================

# Default permissions for certificate files (owner: read/write, group/others: read)
export FILE_PERMISSIONS="644"

# More restrictive permissions for private keys (owner: read/write only)
export PRIVKEY_PERMISSIONS="600"

# Directory permissions (owner: read/write/execute, group/others: read/execute)
export DIRECTORY_PERMISSIONS="755"

# File owner (default: root)
export FILE_OWNER="root"

# File group (default: root)  
export FILE_GROUP="root"

# ================================================================
# USAGE NOTES
# ================================================================
#
# CURRENT STATUS:
# The cert-spreader.sh script currently uses config.conf format.
# To use environment variables instead, you would need to modify
# the script to source this file and read these variables.
#
# ALTERNATIVE APPROACHES:
#
# 1. HYBRID APPROACH (Recommended):
#    Keep config.conf for host lists and complex arrays,
#    but override sensitive values with environment variables:
#    
#    export PROXMOX_TOKEN="real-token"
#    ./cert-spreader.sh
#
# 2. FULL ENVIRONMENT APPROACH:
#    Modify cert-spreader.sh to source this file:
#    
#    # Add to beginning of cert-spreader.sh:
#    if [[ -f "secrets.env" ]]; then
#        source secrets.env
#    fi
#
# 3. WRAPPER SCRIPT APPROACH:
#    Create a wrapper that loads environment variables:
#    
#    #!/bin/bash
#    source secrets.env
#    ./cert-spreader.sh "$@"
#
# ================================================================
# VERIFICATION
# ================================================================
# After loading, you can verify variables are set:
# $ echo $DOMAIN
# $ echo $PROXMOX_USER
# $ env | grep -E "(DOMAIN|PROXMOX|PLEX)"

# ================================================================
# SECURITY REMINDER
# ================================================================
# Environment variables are cleared when your terminal session ends,
# making them more secure than files for storing secrets.
# However, they can still appear in process lists, so use carefully.