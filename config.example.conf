# Certificate Spreader Configuration Example
# Copy this file to config.conf and customize for your environment

# Basic configuration
DOMAIN="example.com"
CERT_DIR="/opt/ssl-certs/your-domain.com"

# SSH configuration
SSH_OPTS="-o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new"

# Logging
LOG_FILE="/var/log/cert-spreader.log"

# Host definitions (space-separated list)
HOSTS="web-server mail-server database-server app-server"

# Host-specific configurations
# Format: "hostname:port:service1,service2,service3"
HOST_SERVICES=(
    "web-server:22:nginx,apache2"
    "mail-server:22:postfix,dovecot"
    "database-server:22:mysql"
    "app-server:2222:myapp"
)


# Proxmox configuration (leave empty if not using Proxmox)
PROXMOX_USER="user@pve!tokenid"
PROXMOX_TOKEN="your-token-here"

# Proxmox nodes (just hostnames - domain will be appended automatically)
PROXMOX_NODES=(
    "proxmox01"
    "proxmox02"
)

# Custom certificate generation configuration
# You can use either the flexible array format or individual settings

# FLEXIBLE ARRAY FORMAT (recommended):
# Format: "type:param:filename" (param optional, filename optional)
# Supports multiple certificate types for different platforms and use cases
CUSTOM_CERTIFICATES=(
    # PKCS#12 certificates for Windows/IIS/Exchange/client certificates
    "pkcs12:your-password:app-certificate.pfx"
    "pkcs12::no-password.pfx"
    
    # Concatenated certificates for Nginx/Apache/HAProxy/load balancers
    "concatenated:/etc/nginx/ssl/dhparam.pem:nginx-combined.pem"
    "concatenated::simple-combined.pem"
    
    # DER certificates for Java applications/Android/embedded systems
    "der::java-app.der"
    "der::android-app.crt"
    
    # PKCS#7 certificates for Windows certificate stores/Java trust chains
    "pkcs7::windows-trust.p7b"
    "p7b::java-trust.p7b"
    
    # Individual certificate files for specific applications
    "crt::server.crt"
    "pem::custom-cert.pem"
    
    # CA bundle files for certificate validation chains
    "bundle::ca-certificates.pem"
    
    # JKS certificates for Java applications (requires Java keytool)
    "jks:keystorepass:java-app.jks"
    "jks:mypassword:tomcat-server.jks"
)

# INDIVIDUAL SETTINGS FORMAT (alternative):
# PKCS12/PFX certificate generation
PKCS12_ENABLED=false
PKCS12_PASSWORD="your-password-here"    # Optional - leave empty for no password
PKCS12_FILENAME="certificate.pfx"       # Custom filename

# Concatenated certificate generation
CONCATENATED_ENABLED=false
CONCATENATED_DHPARAM_FILE="/etc/nginx/ssl/dhparam.pem"  # Optional DH parameters
CONCATENATED_FILENAME="combined.pem"     # Custom filename

# BACKWARD COMPATIBILITY (legacy settings):
# These will be automatically converted to the new format
PLEX_CERT_ENABLED=false
PLEX_CERT_PASSWORD="your-password-here"
ZNC_CERT_ENABLED=false
ZNC_DHPARAM_FILE="/etc/nginx/ssl/dhparam.pem"

# File permissions configuration
# These control the permissions set on certificate files and directories
FILE_PERMISSIONS=644                 # Default permissions for certificate files (owner: read/write, group/others: read)
PRIVKEY_PERMISSIONS=600              # More restrictive permissions for private keys (owner: read/write only)
DIRECTORY_PERMISSIONS=755            # Directory permissions (owner: read/write/execute, group/others: read/execute)
FILE_OWNER=root                      # File owner (default: root)
FILE_GROUP=root                      # File group (default: root)

# Local service configuration
# Configure local service management instead of hardcoded nginx
LOCAL_SERVICE="nginx"                # Local service to reload/restart when certificates change (empty = skip local service management)
LOCAL_SERVICE_MANAGER="systemctl"    # Service manager command (systemctl, service, rc-service, etc.)